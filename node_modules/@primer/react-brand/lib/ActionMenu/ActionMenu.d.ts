import React, { PropsWithChildren, Ref, ReactElement } from 'react';
import { PositionSettings } from '@primer/behaviors';
import type { BaseProps } from '../component-helpers';
/**
 * Design tokens
 */
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/action-menu/colors-with-modes.css';
export declare const actionMenuOverlaySides: import("@primer/behaviors").AnchorSide[];
export type ActionMenuSizes = 'small' | 'medium';
export type ActionMenuProps = {
    /**
     * The content of the ActionMenu. Must be an ActionMenu.Button and an ActionMenu.Overlay
     */
    children: ReactElement<ActionMenuButtonProps> | ReactElement<ActionMenuOverlayProps> | Array<ReactElement<ActionMenuButtonProps> | ReactElement<ActionMenuOverlayProps>>;
    /**
     * Determines whether the ActionMenu is disabled
     */
    disabled?: boolean;
    /**
     * Determines whether the ActionMenu is open by default
     */
    open?: boolean;
    /**
     * Callback that is called when an item is selected.
     * The value of the selected item is passed as an argument.
     */
    onSelect?: (newValue: string) => void;
    /**
     * The selection variant of the ActionMenu.
     * - `single`: Only one item can be selected at a time. Menu items as a menuitemradio.
     * - `none`: No items can be selected. Menu items as a menuitem.
     */
    selectionVariant?: 'single' | 'none';
    /**
     * Test id for the ActionMenu
     */
    'data-testid'?: string;
    /**
     * Horizontal alignment of the menu relative to the bottom of the button
     */
    menuAlignment?: 'start' | 'end';
    /**
     * Size configuratin of the ActionMenu
     */
    size?: ActionMenuSizes;
    menuSide?: PositionSettings['side'];
} & BaseProps<HTMLDivElement>;
type ActionMenuContextType = {
    size?: ActionMenuSizes;
    setSize?: React.Dispatch<React.SetStateAction<ActionMenuSizes | undefined>>;
};
export declare const useActionMenuContext: () => ActionMenuContextType;
export declare const ActionMenuProvider: React.FC<ActionMenuProps>;
type ActionMenuButtonProps = PropsWithChildren<Ref<HTMLButtonElement>> & {
    id?: string;
    ref?: React.RefObject<HTMLButtonElement>;
    className?: string;
    menuOpen?: boolean;
    disabled?: boolean;
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    'data-testid'?: string;
    size?: ActionMenuSizes;
};
type ActionMenuItemProps = {
    value: string;
    handler?: (newValue: string) => void;
    selected?: boolean;
    type?: 'none' | 'single';
    disabled?: boolean;
    size?: ActionMenuSizes;
} & PropsWithChildren<React.HTMLProps<HTMLLIElement>>;
type ActionMenuOverlayProps = PropsWithChildren<Ref<HTMLUListElement>> & {
    'aria-label': string;
    id?: string;
    ref?: React.RefObject<HTMLUListElement>;
    className?: string;
    'data-testid'?: string;
    menuOpen?: boolean;
    style?: React.CSSProperties;
};
/**
 * Use ActionMenu to display a list of actions or selections that expand through a trigger button.
 * @see https://primer.style/brand/components/ActionMenu
 */
export declare const ActionMenu: React.NamedExoticComponent<{
    /**
     * The content of the ActionMenu. Must be an ActionMenu.Button and an ActionMenu.Overlay
     */
    children: ReactElement<ActionMenuButtonProps> | ReactElement<ActionMenuOverlayProps> | Array<ReactElement<ActionMenuButtonProps> | ReactElement<ActionMenuOverlayProps>>;
    /**
     * Determines whether the ActionMenu is disabled
     */
    disabled?: boolean | undefined;
    /**
     * Determines whether the ActionMenu is open by default
     */
    open?: boolean | undefined;
    /**
     * Callback that is called when an item is selected.
     * The value of the selected item is passed as an argument.
     */
    onSelect?: ((newValue: string) => void) | undefined;
    /**
     * The selection variant of the ActionMenu.
     * - `single`: Only one item can be selected at a time. Menu items as a menuitemradio.
     * - `none`: No items can be selected. Menu items as a menuitem.
     */
    selectionVariant?: "none" | "single" | undefined;
    /**
     * Test id for the ActionMenu
     */
    'data-testid'?: string | undefined;
    /**
     * Horizontal alignment of the menu relative to the bottom of the button
     */
    menuAlignment?: "start" | "end" | undefined;
    /**
     * Size configuratin of the ActionMenu
     */
    size?: ActionMenuSizes | undefined;
    menuSide?: import("@primer/behaviors").AnchorSide | undefined;
} & BaseProps<HTMLDivElement>> & {
    readonly type: ({ id, children, "data-testid": testId, disabled, open, selectionVariant, menuAlignment, size, menuSide, onSelect, }: ActionMenuProps) => JSX.Element;
} & {
    Button: React.ForwardRefExoticComponent<(Omit<((instance: HTMLButtonElement | null) => void) & {
        children?: React.ReactNode;
    } & {
        id?: string | undefined;
        ref?: React.RefObject<HTMLButtonElement> | undefined;
        className?: string | undefined;
        menuOpen?: boolean | undefined;
        disabled?: boolean | undefined;
        onClick?: ((event: React.MouseEvent<HTMLButtonElement>) => void) | undefined;
        'data-testid'?: string | undefined;
        size?: ActionMenuSizes | undefined;
    }, "ref"> | Omit<React.RefObject<HTMLButtonElement> & {
        children?: React.ReactNode;
    } & {
        id?: string | undefined;
        ref?: React.RefObject<HTMLButtonElement> | undefined;
        className?: string | undefined;
        menuOpen?: boolean | undefined;
        disabled?: boolean | undefined;
        onClick?: ((event: React.MouseEvent<HTMLButtonElement>) => void) | undefined;
        'data-testid'?: string | undefined;
        size?: ActionMenuSizes | undefined;
    }, "ref">) & React.RefAttributes<HTMLButtonElement>>;
    Item: ({ children, className, disabled, handler, selected, type, value, ...props }: ActionMenuItemProps) => JSX.Element;
    Overlay: React.ForwardRefExoticComponent<(Omit<((instance: HTMLUListElement | null) => void) & {
        children?: React.ReactNode;
    } & {
        'aria-label': string;
        id?: string | undefined;
        ref?: React.RefObject<HTMLUListElement> | undefined;
        className?: string | undefined;
        'data-testid'?: string | undefined;
        menuOpen?: boolean | undefined;
        style?: React.CSSProperties | undefined;
    }, "ref"> | Omit<React.RefObject<HTMLUListElement> & {
        children?: React.ReactNode;
    } & {
        'aria-label': string;
        id?: string | undefined;
        ref?: React.RefObject<HTMLUListElement> | undefined;
        className?: string | undefined;
        'data-testid'?: string | undefined;
        menuOpen?: boolean | undefined;
        style?: React.CSSProperties | undefined;
    }, "ref">) & React.RefAttributes<HTMLUListElement>>;
    testIds: {
        root: string;
        readonly button: string;
        readonly overlay: string;
        readonly list: string;
        readonly item: string;
    };
};
export {};
