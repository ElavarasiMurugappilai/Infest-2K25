import React from 'react';
import type { BaseProps } from '../component-helpers';
/**
 * Design tokens
 */
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/cta-banner/colors-with-modes.css';
export type CTABannerProps = BaseProps<HTMLElement> & React.HTMLAttributes<HTMLElement> & {
    children: React.ReactNode | React.ReactNode[];
    align?: 'start' | 'center';
    hasBorder?: boolean;
    hasShadow?: boolean;
    hasBackground?: boolean;
};
export declare const CTABanner: React.ForwardRefExoticComponent<Omit<BaseProps<HTMLElement> & React.HTMLAttributes<HTMLElement> & {
    children: React.ReactNode | React.ReactNode[];
    align?: "start" | "center" | undefined;
    hasBorder?: boolean | undefined;
    hasShadow?: boolean | undefined;
    hasBackground?: boolean | undefined;
}, "ref"> & React.RefAttributes<HTMLElement>> & {
    Heading: React.ForwardRefExoticComponent<Omit<BaseProps<HTMLHeadingElement> & {
        children: React.ReactNode | React.ReactNode[];
    } & {
        as?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | undefined;
        size?: "display" | "1" | "2" | "3" | "4" | "5" | "6" | "subhead-large" | "subhead-medium" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | {
            narrow?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | undefined;
            regular?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | undefined;
            wide?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | undefined;
        } | undefined;
        stretch?: "normal" | "condensed" | "expanded" | {
            narrow?: "normal" | "condensed" | "expanded" | undefined;
            regular?: "normal" | "condensed" | "expanded" | undefined;
            wide?: "normal" | "condensed" | "expanded" | undefined;
        } | undefined;
        letterSpacing?: "normal" | "condensed" | "none" | {
            narrow?: "normal" | "condensed" | "none" | undefined;
            regular?: "normal" | "condensed" | "none" | undefined;
            wide?: "normal" | "condensed" | "none" | undefined;
        } | undefined;
        font?: "mona-sans" | "hubot-sans" | undefined;
    } & React.HTMLAttributes<HTMLHeadingElement>, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Description: React.ForwardRefExoticComponent<Omit<BaseProps<HTMLParagraphElement> & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
    ButtonGroup: React.ForwardRefExoticComponent<Omit<Omit<BaseProps<HTMLDivElement> & {
        children: React.ReactElement<import("..").ButtonProps<React.ElementType<"a" | "button">>, string | React.JSXElementConstructor<any>> | React.ReactElement<import("..").ButtonProps<React.ElementType<"a" | "button">>, string | React.JSXElementConstructor<any>>[];
        buttonSize?: "medium" | "small" | "large" | undefined;
        buttonsAs?: React.ElementType<any> | undefined;
    }, "ref"> & React.RefAttributes<HTMLDivElement>, "ref"> & React.RefAttributes<HTMLDivElement>>;
};
