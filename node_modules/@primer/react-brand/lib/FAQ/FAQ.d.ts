import React, { PropsWithChildren } from 'react';
import { AccordionContent, HeadingProps } from '..';
import type { BaseProps } from '../component-helpers';
/**
 * Design tokens
 */
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/faq/base.css';
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/faq/colors-with-modes.css';
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/faq/faq.css';
export type FAQRootProps = PropsWithChildren<BaseProps<HTMLElement>> & React.HTMLAttributes<HTMLElement>;
type FAQHeadingProps = BaseProps<HTMLHeadingElement> & {
    align?: 'start' | 'center';
    children: React.ReactNode | React.ReactNode[];
    as?: HeadingProps['as'];
} & HeadingProps;
export type FAQSubheadingProps = BaseProps<HTMLHeadingElement> & {
    align?: 'start' | 'center';
    children: React.ReactNode | React.ReactNode[];
    as?: Exclude<HeadingProps['as'], 'h1'>;
} & HeadingProps;
declare function FAQSubheading({ children, className, as, size, weight, ...rest }: FAQSubheadingProps): JSX.Element;
/**
 * FAQ component:
 * {@link https://primer.style/brand/components/FAQ/ See usage examples}.
 */
export declare const FAQ: React.ForwardRefExoticComponent<Omit<FAQRootProps, "ref"> & React.RefAttributes<HTMLElement>> & {
    Subheading: typeof FAQSubheading;
    Heading: React.ForwardRefExoticComponent<Omit<FAQHeadingProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Item: React.ForwardRefExoticComponent<Omit<import("..").AccordionRootProps, "ref"> & React.RefAttributes<HTMLDetailsElement>>;
    Question: React.ForwardRefExoticComponent<Omit<BaseProps<HTMLHeadingElement> & {
        className?: string | undefined;
        children: string;
        as?: "h2" | "h3" | "h4" | "h5" | "h6" | undefined;
        reversedToggles?: boolean | undefined;
        variant?: "default" | "emphasis" | undefined;
        open?: boolean | undefined;
        handleOpen?: ((boolean: any) => void) | undefined;
        parentRef?: React.RefObject<HTMLDetailsElement> | undefined;
    }, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Answer: typeof AccordionContent;
};
export {};
