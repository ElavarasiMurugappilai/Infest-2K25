import React, { PropsWithChildren } from 'react';
import { ButtonBaseProps } from '../Button';
import { HeadingProps } from '../Heading';
import { TextSizes, TextWeightVariants, ResponsiveWeightMap } from '../Text';
import { LabelProps } from '../Label';
import type { BaseProps } from '../component-helpers';
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/hero/base.css';
export type HeroProps = BaseProps<HTMLElement> & {
    align?: 'start' | 'center';
    imageContainerClassName?: string;
    imageContainerStyle?: React.CSSProperties;
};
type HeroHeadingProps = Omit<HeadingProps, 'as'>;
type HeroDescriptionProps = {
    size?: (typeof TextSizes)[number];
    weight?: TextWeightVariants | ResponsiveWeightMap;
} & BaseProps<HTMLParagraphElement>;
type HeroEyebrowProps = PropsWithChildren<BaseProps<HTMLDivElement>>;
type HeroLabelProps = LabelProps & BaseProps<HTMLSpanElement>;
export declare const Hero: React.ForwardRefExoticComponent<Omit<React.PropsWithChildren<HeroProps>, "ref"> & React.RefAttributes<HTMLElement>> & {
    Heading: React.ForwardRefExoticComponent<Omit<HeroHeadingProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Description: React.ForwardRefExoticComponent<Omit<React.PropsWithChildren<HeroDescriptionProps>, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
    PrimaryAction: React.ForwardRefExoticComponent<(Omit<{
        as?: "a" | "button" | undefined;
        href: string;
    } & ButtonBaseProps & BaseProps<HTMLAnchorElement> & {
        as?: "a" | undefined;
    } & {
        children?: React.ReactNode;
    }, "ref"> | Omit<{
        as?: "a" | "button" | undefined;
        href: string;
    } & ButtonBaseProps & BaseProps<HTMLButtonElement> & {
        as?: "button" | undefined;
    } & {
        children?: React.ReactNode;
    }, "ref">) & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>>;
    SecondaryAction: React.ForwardRefExoticComponent<(Omit<{
        as?: "a" | "button" | undefined;
        href: string;
    } & ButtonBaseProps & BaseProps<HTMLAnchorElement> & {
        as?: "a" | undefined;
    } & {
        children?: React.ReactNode;
    }, "ref"> | Omit<{
        as?: "a" | "button" | undefined;
        href: string;
    } & ButtonBaseProps & BaseProps<HTMLButtonElement> & {
        as?: "button" | undefined;
    } & {
        children?: React.ReactNode;
    }, "ref">) & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>>;
    Image: React.ForwardRefExoticComponent<(Omit<{
        position?: "inline-end" | "block-end" | undefined;
    } & React.ImgHTMLAttributes<HTMLImageElement> & BaseProps<HTMLImageElement> & {
        src: string;
        alt: string;
        aspectRatio?: import("../Image").ImageAspectRatio | undefined;
        media?: string | undefined;
        srcSet?: Pick<React.ImgHTMLAttributes<HTMLImageElement>, "srcSet"> | undefined;
    } & {
        as?: "img" | undefined;
        srcSet?: Pick<React.ImgHTMLAttributes<HTMLImageElement>, "srcSet"> | undefined;
    }, "ref"> | Omit<{
        position?: "inline-end" | "block-end" | undefined;
    } & React.ImgHTMLAttributes<HTMLImageElement> & BaseProps<HTMLImageElement> & {
        src: string;
        alt: string;
        aspectRatio?: import("../Image").ImageAspectRatio | undefined;
        media?: string | undefined;
        srcSet?: Pick<React.ImgHTMLAttributes<HTMLImageElement>, "srcSet"> | undefined;
    } & {
        as: "picture";
        sources?: {
            srcset: string;
            media: string;
        }[] | undefined;
        srcSet?: undefined;
    }, "ref">) & React.RefAttributes<HTMLImageElement>>;
    Label: React.ForwardRefExoticComponent<Omit<HeroLabelProps, "ref"> & React.RefAttributes<HTMLSpanElement>>;
    Eyebrow: React.ForwardRefExoticComponent<Omit<HeroEyebrowProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
};
export {};
