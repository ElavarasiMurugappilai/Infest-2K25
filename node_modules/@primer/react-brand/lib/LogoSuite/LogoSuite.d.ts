import React, { PropsWithChildren } from 'react';
import type { BaseProps } from '../component-helpers';
import { HeadingProps } from '../';
/**
 * Design tokens
 */
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/logosuite/colors-with-modes.css';
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/logosuite/base.css';
type LogoSuiteProps = {
    /**
     * The horizontal alignment of the LogoSuite.
     */
    align?: 'start' | 'center' | 'justify';
    /**
     * Whether to render a divider immediately after the LogoSuite.
     */
    hasDivider?: boolean;
    /**
     * Test id for the root LogoSuite element.
     */
    'data-testid'?: string;
} & BaseProps<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement>;
type LogoSuiteHeadingProps = BaseProps<HTMLHeadingElement> & HeadingProps & {
    /**
     * Whether to visually hide the heading.
     */
    visuallyHidden?: boolean;
};
/**
 * Use LogoSuite to present a list logos, such as sponsors or vendors.
 * @see https://primer.style/brand/components/LogoSuite
 */
export declare const LogoSuite: (({ align, children, className, hasDivider, "data-testid": testId, }: PropsWithChildren<LogoSuiteProps>) => JSX.Element) & {
    Heading: React.ForwardRefExoticComponent<Omit<LogoSuiteHeadingProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Description: React.ForwardRefExoticComponent<(Omit<BaseProps<HTMLParagraphElement> & {
        font?: "mona-sans" | "hubot-sans" | undefined;
        size?: "700" | "600" | "500" | "400" | "300" | "200" | "100" | undefined;
        variant?: "default" | "muted" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | import("../").ResponsiveWeightMap | undefined;
        align?: "start" | "center" | "end" | undefined;
    } & {
        as?: "span" | "div" | "em" | "p" | "strong" | undefined;
    } & React.HTMLAttributes<HTMLParagraphElement> & {
        as?: "p" | undefined;
    } & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref"> | Omit<BaseProps<HTMLParagraphElement> & {
        font?: "mona-sans" | "hubot-sans" | undefined;
        size?: "700" | "600" | "500" | "400" | "300" | "200" | "100" | undefined;
        variant?: "default" | "muted" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | import("../").ResponsiveWeightMap | undefined;
        align?: "start" | "center" | "end" | undefined;
    } & {
        as?: "span" | "div" | "em" | "p" | "strong" | undefined;
    } & React.HTMLAttributes<HTMLSpanElement> & BaseProps<HTMLSpanElement> & {
        as?: "span" | undefined;
    } & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref"> | Omit<BaseProps<HTMLParagraphElement> & {
        font?: "mona-sans" | "hubot-sans" | undefined;
        size?: "700" | "600" | "500" | "400" | "300" | "200" | "100" | undefined;
        variant?: "default" | "muted" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | import("../").ResponsiveWeightMap | undefined;
        align?: "start" | "center" | "end" | undefined;
    } & {
        as?: "span" | "div" | "em" | "p" | "strong" | undefined;
    } & React.HTMLAttributes<HTMLDivElement> & BaseProps<HTMLDivElement> & {
        as?: "div" | undefined;
    } & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref"> | Omit<BaseProps<HTMLParagraphElement> & {
        font?: "mona-sans" | "hubot-sans" | undefined;
        size?: "700" | "600" | "500" | "400" | "300" | "200" | "100" | undefined;
        variant?: "default" | "muted" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | import("../").ResponsiveWeightMap | undefined;
        align?: "start" | "center" | "end" | undefined;
    } & {
        as?: "span" | "div" | "em" | "p" | "strong" | undefined;
    } & React.HTMLAttributes<HTMLElement> & BaseProps<HTMLElement> & {
        as?: "strong" | undefined;
    } & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref"> | Omit<BaseProps<HTMLParagraphElement> & {
        font?: "mona-sans" | "hubot-sans" | undefined;
        size?: "700" | "600" | "500" | "400" | "300" | "200" | "100" | undefined;
        variant?: "default" | "muted" | undefined;
        weight?: "light" | "heavy" | "extrabold" | "bold" | "semibold" | "medium" | "normal" | "extralight" | import("../").ResponsiveWeightMap | undefined;
        align?: "start" | "center" | "end" | undefined;
    } & {
        as?: "span" | "div" | "em" | "p" | "strong" | undefined;
    } & React.HTMLAttributes<HTMLElement> & BaseProps<HTMLElement> & {
        as?: "em" | undefined;
    } & {
        children: React.ReactNode | React.ReactNode[];
    }, "ref">) & React.RefAttributes<HTMLParagraphElement>>;
    Logobar: React.ForwardRefExoticComponent<Omit<BaseProps<HTMLDivElement> & {
        children: React.ReactNode | React.ReactNode[];
        /**
         * Enables an optional marquee effect
         */
        marquee?: boolean | undefined;
        /**
         * The speed of the marquee effect
         */
        marqueeSpeed?: "normal" | "slow" | undefined;
        /**
         * The stylistic variant of the LogoBar.
         */
        variant?: "muted" | "emphasis" | undefined;
    }, "ref"> & React.RefAttributes<HTMLDivElement>>;
    testIds: {
        root: string;
        readonly marqueeGroup: string;
    };
};
export {};
