import React, { PropsWithChildren } from 'react';
import { HeadingProps, LinkProps } from '..';
import type { BaseProps } from '../component-helpers';
/**
 * Design tokens
 */
import '@primer/brand-primitives/lib/design-tokens/css/tokens/functional/components/pillar/colors-with-modes.css';
import { Icon as IconProps } from '@primer/octicons-react';
export declare const PillarIconColors: readonly ["default", "blue", "coral", "green", "gray", "indigo", "lemon", "lime", "orange", "pink", "purple", "red", "teal", "yellow"];
export declare const defaultPillarIconColor: "default";
export type PillarProps<C extends keyof JSX.IntrinsicElements = 'div'> = React.HTMLAttributes<C> & {
    /**
     * The HTML element used to render the Pillar.
     */
    as?: C | 'div' | 'article';
    /**
     * Aligns the pillar content
     */
    align?: 'start' | 'center';
} & (C extends 'article' ? PropsWithChildren<BaseProps<HTMLElement>> : PropsWithChildren<BaseProps<HTMLDivElement>>);
type PillarIconProps = BaseProps<HTMLSpanElement> & {
    icon: React.ReactNode | IconProps;
    color?: (typeof PillarIconColors)[number];
};
declare function PillarIcon({ icon: Icon, className, color, ...rest }: PillarIconProps): JSX.Element;
type PillarHeadingProps = BaseProps<HTMLHeadingElement> & {
    children: React.ReactNode | React.ReactNode[];
    as?: Exclude<HeadingProps['as'], 'h1'>;
} & HeadingProps;
type PillarDescriptionProps = PropsWithChildren<BaseProps<HTMLParagraphElement>>;
/**
 * Pillar component:
 * {@link https://primer.style/brand/components/Pillar/ See usage examples}.
 */
export declare const Pillar: React.ForwardRefExoticComponent<Omit<PillarProps<"div">, "ref"> & React.RefAttributes<HTMLDivElement>> & {
    Icon: typeof PillarIcon;
    Heading: React.ForwardRefExoticComponent<Omit<PillarHeadingProps, "ref"> & React.RefAttributes<HTMLHeadingElement>>;
    Description: React.ForwardRefExoticComponent<Omit<PillarDescriptionProps, "ref"> & React.RefAttributes<HTMLParagraphElement>>;
    Link: React.ForwardRefExoticComponent<Omit<{
        href: string;
    } & Omit<LinkProps, "size" | "direction"> & BaseProps<HTMLAnchorElement>, "ref"> & React.RefAttributes<HTMLAnchorElement>>;
};
export {};
