import React, { Ref, PropsWithChildren } from 'react';
import { AnimateProps } from './animation/AnimationProvider';
/**
 * Layout
 */
export declare const Container: ({ children, style, }: {
    children: React.ReactElement[] | React.ReactElement;
    style?: React.CSSProperties | undefined;
}) => JSX.Element;
type RedlineBackgroundProps = {
    height?: number;
    hasBorder?: boolean;
    className?: string;
};
export declare function RedlineBackground({ height, hasBorder, ...rest }: PropsWithChildren<RedlineBackgroundProps>): JSX.Element;
/**
 * Base Types
 */
/**
 * Component helper type to be extended by component types, e.g.:
 * type CustomComponentProps = BaseProps<HTMLDivElement> & { ... }
 *
 * Example use:
 *   const CustomComponent = forwardRef<HTMLDivElement, CustomComponentProps>(({className, ...props}, ref) => { ... })
 *   // OR:
 *   const CustomComponent = forwardRef(({className: CustomComponentProps, ...props}, ref: Ref<HTMLDivElement>) => { ... })
 */
export type BaseProps<T> = {
    className?: string;
    id?: string;
    ref?: Ref<T>;
    animate?: AnimateProps;
};
export {};
