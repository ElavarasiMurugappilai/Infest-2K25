import React from 'react';
import type { BaseProps } from '../../component-helpers';
import type { FormInputSizes, FormValidationStatus } from '../form-types';
export type SelectProps = {
    /**
     * Applies full width styling.
     */
    fullWidth?: boolean;
    /**
     * Applies a required attribute to the input
     */
    required?: boolean;
    /**
     * Applies alternative sizing to the input
     */
    size?: FormInputSizes;
    /**
     *
     */
    validationStatus?: FormValidationStatus;
} & Omit<React.InputHTMLAttributes<HTMLSelectElement>, 'size'> & BaseProps<HTMLSelectElement>;
export type OptionProps = {
    value: string;
} & React.PropsWithChildren<React.HTMLProps<HTMLOptionElement>>;
export type OptGroupProps = {
    /**
     * Specifies that an option-group should be disabled
     */
    disabled?: string;
    /**
     * Specifies a label for an option-group
     */
    label: string;
} & React.PropsWithChildren<React.HTMLProps<HTMLOptGroupElement>>;
/**
 * Select
 */
export declare const Select: React.ForwardRefExoticComponent<Omit<{
    /**
     * Applies full width styling.
     */
    fullWidth?: boolean | undefined;
    /**
     * Applies a required attribute to the input
     */
    required?: boolean | undefined;
    /**
     * Applies alternative sizing to the input
     */
    size?: FormInputSizes | undefined;
    /**
     *
     */
    validationStatus?: FormValidationStatus | undefined;
} & Omit<React.InputHTMLAttributes<HTMLSelectElement>, "size"> & BaseProps<HTMLSelectElement>, "ref"> & React.RefAttributes<unknown>> & {
    Option: ({ children, value, ...rest }: OptionProps) => JSX.Element;
    OptGroup: ({ children, label, ...rest }: OptGroupProps) => JSX.Element;
};
